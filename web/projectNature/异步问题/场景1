场景一 ，后端旧代码，接口返回数量多就会慢，而公司网关 超时会断开，批量导出功能-----只能分批次导出

1、先用for 写了分批次调用   问题：接口同步调用（耗时长）、一次报错就会g（for 里面用try catch 包一层，错误时返回 空，外面也包一层）


let temporaryArr: any[] = [];
          const remainder = Math.ceil(tableIdList.length / 150);
          for (let i = 0; i < remainder; i++) {
            const temporaryParam = tableIdList.slice(i * 150, 150 * (i + 1));
            const arrData = (await functionApi.exportFunction(temporaryParam))
              .data;
            temporaryArr = temporaryArr.concat(arrData);
          }
          JsonFileExport({ functions: temporaryArr }, "functions.txt");

 2、然后用  Promise.all(apiList) 写了，耗时减少，但是一次错误就会g，Promise.allSettled似乎能解决（未验证）
 或者 （未验证） promise.all 里面包一层 Promise.all([p1, p2, p3].map(p => p.catch(e => '出错后返回的值' ))) .then(values => { console.log(values); }).catch(err => { console.log(err); })


 let temporaryArr: any[] = [];
        const remainder = Math.ceil(tableIdList.length / 150);
        const apiList: any[] = [];

        for (let i = 0; i < remainder; i++) {
          const temporaryParam = tableIdList.slice(i * 150, 150 * (i + 1));
          apiList.push(functionApi.exportFunction(temporaryParam));
        }
        Promise.all(apiList)
          .then((result) => {
            temporaryArr = result.map((obj) => obj.data);
          })
          .catch((e) => console.log(e));

        JsonFileExport({ functions: temporaryArr }, "functions.txt");
