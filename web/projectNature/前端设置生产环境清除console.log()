开发环境console.log的处理--- --webpack 里的插件----webpack一般被脚手架封装---  使用antd core 操控webpack-  ------通过webpack 里的插件修改console.log------了解webpack的基本使用


webpack 的使用:
基本概念
Entry
Output
Loaders
Plugins
Mode
Browser Compatibility

Entry:选择打包入口

执行 yarn start发生了什么


由于脚手架 自动创建项目后,把 webpack自动包装,所以直接操作webpack十分困难
1.eject 把webpack暴露出来,不建议,此过程不可逆,暴露出来了,本来由脚手架自动维护的版本,需要自己维护
2.craco   "start": "react-scripts start", (本来的)
  +    "start": "craco start",
  yarn add @craco/craco
3.rewire   "start": "react-scripts start", (本来的)
  +     "start": "react-app-rewired start",

//   为什么要操作webpack?
// 本次要将生产环境的 console.log 全部


react-脚手架-  core操作webpack

"start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "craco eject"

    yarn

    craco.config 配置本项目就是

    rewire配置：
    const { override, fixBabelImports ,addWebpackExternals ,addWebpackAlias ,addLessLoader } = require('customize-cra');
    const path = require("path")
    const UglifyJsPlugin = require("uglifyjs-webpack-plugin")
    const myPlugin = [
      new UglifyJsPlugin(
        {
          uglifyOptions: {
            warnings: false,
            compress: {
              drop_debugger: true,
              drop_console: true
            }
          }
        }
      )
    ]

    module.exports = override(
      fixBabelImports('import', { //配置按需加载
        libraryName: 'antd',
        libraryDirectory: 'es',
        style: true,
      }),
      addWebpackExternals({ //不做打包处理配置，如直接以cdn引入的
        echarts: "window.echarts",
        // highcharts:"window.highcharts"
      }),
      addWebpackAlias({ //路径别名
        '@': path.resolve(__dirname, 'src'),
      }),
      addLessLoader({
        javascriptEnabled: true,
        modifyVars: {
          '@primary-color': '#1DA57A'
        }
      }),
      (config)=>{ //暴露webpack的配置 config ,evn
        // 去掉打包生产map 文件
        // config.devtool = config.mode === 'development' ? 'cheap-module-source-map' : false;
        if(process.env.NODE_ENV==="production") config.devtool=false;
        if(process.env.NODE_ENV!=="development") config.plugins = [...config.plugins,...myPlugin]

        //1.修改、添加loader 配置 :
        // 所有的loaders规则是在config.module.rules(数组)的第二项
        // 即：config.module.rules[2].oneof  (如果不是，具体可以打印 一下是第几项目)
        // 修改 sass 配置 ，规则 loader 在第五项(具体看配置)
        const loaders = config.module.rules.find(rule => Array.isArray(rule.oneOf)).oneOf;
        loaders[5].use.push({
          loader: 'sass-resources-loader',
          options: {
            resources: path.resolve(__dirname, 'src/asset/base.scss')//全局引入公共的scss 文件
          }
      })
        return config
      }

    );