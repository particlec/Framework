JS 深拷贝的具体实现

深拷贝一般说的是引用数据类型来说的，对于基本数据类型 是没啥区别的

深拷贝 就是 开辟新的内存空间，深层拷贝，拷贝后与 原来的对象无关
浅拷贝 第一层是开辟新的内存空间，更深层次实际是还引用，原来的对象改变，内部也会改变

 常用库 lodash
 使用 ：
     npm i -save lodash
     const _ = require("lodash");
     let newData = _.cloneDeep(data);

 一般使用 JSON.parse(JSON.stringify())

 浅拷贝 Object.assign({},...source)  {...obj}


深拷贝基础版: 利用for in  把对象的每个元素遍历，在利用递归自身,把内部全部复制一遍

const cloneObjectFirst = (target)=>{
    
   if(typeof target ==="Object"){
   const cloneTarget = {}
   for(const key in target){
      cloneTarget[key] = cloneObjectFirst(target[key])
   }
   return cloneTarget
  }else{
  return target
}}
考虑数组：加上 const cloneTarget = Array.isArray(target)?[]:{}

考虑循环引用：
const target = {
    field1: 1,
    field2: undefined,
    field4: [2, 4, 8]
};

target.field2 = target;
 内部就会出现 const target = {
            target:target
        };里面会无线循环，其实就不该这样写，其实这就是不是深拷贝考虑的问题，是你自己写的不规范

解决：出现问题的实质是 对象内部的value 引用了其对象本身，导致无线循环
加一个检测 ：当内部引用 自身时，停止内部循环直接返回一个 对象给他

最终版：
const clone =(target,map =new Map())=>{
 if(typeof target ==='Object'){
 let cloneTarget = Array.isArray(target)?[]:{}
  if(map.get(target)){
  return map.get(target)
  }
  map.set(target,target)
  for(let key in target){
   cloneTarget[key] = clone(target(key),map)
  }
  return cloneTarget
 }else{
  return target
 }
}

本来新类型symbol、函数、日期、正则、undefined 时 会出问题，但是最新的js、node都处理了，所以
最终版就这个了：
 map.set(target,target) 收集本身对象，map.get(target)在内部发现引用自身时，返回存的对象，中断内部循环
const clone =(target,map =new Map())=>{

 if(typeof target ==='Object'){
 let cloneTarget = Array.isArray(target)?[]:{}
  if(map.get(target)){
  return map.get(target)
  }
  map.set(target,target)
  for(let key in target){
   cloneTarget[key] = clone(target(key),map)
  }
  return cloneTarget
 }else{
  return target
 }
}


在node 运行例子 ：
const clone =(target,map =new Map())=>{
    if(typeof target ==='Object'){
        let cloneTarget = Array.isArray(target)?[]:{}
        if(map.get(target)){
            return map.get(target)
        }
        map.set(target,target)
        for(let key in target){
            cloneTarget[key] = clone(target(key),map)
        }
        return cloneTarget
    }else{
        return target
    }
}
const map = new Map();
map.set('key', 'value');
map.set('ConardLi', 'code秘密花园');

const set = new Set();
set.add('ConardLi');
set.add('code秘密花园');

const target = {
    field1: 1,
    field2: undefined,
    field3: {
        child: 'child'
    },
    field4: [2, 4, 8],
    empty: null,
    map,
    set,
    bool: new Boolean(true),
    num: new Number(2),
    str: new String(2),
    symbol: Object(Symbol(1)),
    date: new Date(),
    reg: /\d+/,
    error: new Error(),
    func1: () => {
        console.log('code秘密花园');
    },
    func2: function (a, b) {
        return a + b;
    }
};

console.log(clone(target));


// 发现没啥问题
C:\Users\86173\Desktop\新建文件夹>node 1.js
{
  field1: 1,
  field2: undefined,
  field3: { child: 'child' },
  field4: [ 2, 4, 8 ],
  empty: null,
  map: Map(2) { 'key' => 'value', 'ConardLi' => 'code秘密花园' },
  set: Set(2) { 'ConardLi', 'code秘密花园' },
  bool: [Boolean: true],
  num: [Number: 2],
  str: [String: '2'],
  symbol: [Symbol: Symbol(1)],
  date: 2023-01-13T01:16:22.556Z,
  reg: /\d+/,
  error: Error
      at Object.<anonymous> (C:\Users\86173\Desktop\新建文件夹\1.js:40:12)
      at Module._compile (node:internal/modules/cjs/loader:1159:14)
      at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)
      at Module.load (node:internal/modules/cjs/loader:1037:32)
      at Module._load (node:internal/modules/cjs/loader:878:12)
      at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
      at node:internal/main/run_main_module:23:47,
  func1: [Function: func1],
  func2: [Function: func2]
}


chatgpt版
function deepCopyWithCircular(obj, cache = new WeakMap()) {
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }

  if (cache.has(obj)) {
    return cache.get(obj);
  }

  if (Array.isArray(obj)) {
    const newArray = [];
    cache.set(obj, newArray);
    for (let i = 0; i < obj.length; i++) {
      newArray[i] = deepCopyWithCircular(obj[i], cache);
    }
    return newArray;
  }

  if (obj instanceof RegExp) {
    return new RegExp(obj.source, obj.flags);
  }

  if (obj instanceof Function) {
    return function (...args) {
      return obj.apply(this, args);
    };
  }

  const newObj = Object.create(Object.getPrototypeOf(obj));
  cache.set(obj, newObj);
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      newObj[key] = deepCopyWithCircular(obj[key], cache);
    }
  }
  return newObj;
}

// 示例用法
const originalObj = {
  a: 1,
  b: [2, 3, 4],
  c: {
    d: 5,
    e: {
      f: 6
    }
  }
};

originalObj.circularRef = originalObj; // 循环引用

const copiedObj = deepCopyWithCircular(originalObj);
console.log(copiedObj);
这个示例中，deepCopyWithCircular 函数使用了一个 cache 参数，这是一个 WeakMap 对象，用于存储已经拷贝过的对象，以避免处理循环引用时的无限递归。同时，对于正则表达式和函数，我们分别创建了新的实例，以确保拷贝的完整性。

请注意，尽管这个示例可以处理循环引用、函数和正则表达式，但仍然可能存在一些特殊情况没有涵盖到。在实际应用中，你可能会遇到更多复杂的情况，因此建议使用成熟的库来进行深拷贝，比如 Lodash 的 _.cloneDeep 或者其他类似的工具函数。



  const target = {
    field1: 1,
    field2: undefined,
    field3: {
        child: 'child'
    }as any,
    field4: [2, 4, 8],
    empty: null,
    bool: new Boolean(true),
    num: new Number(2),
    str: new String(2),
    symbol: Object(Symbol(1)),
    date: new Date(),
    reg: /\d+/,
    error: new Error(),
    func1: () => {
        console.log('code秘密花园');
    },
    func2: function (a:any, b:any) {
        return a + b;
    }
};

target.field3.child = target;
// 2023 0817 都不管循环引用了？
console.log(_.cloneDeep(target))


https://blog.csdn.net/weixin_44384273/article/details/131803653?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-131803653-blog-130645272.235%5Ev38%5Epc_relevant_anti_vip_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-131803653-blog-130645272.235%5Ev38%5Epc_relevant_anti_vip_base&utm_relevant_index=5



用 Javascript 实现深拷贝并处理循环引用,可以这样做:

定义一个 Map 来记录已经拷贝过的对象
在拷贝对象时,先检查 Map 中是否存在该对象:
如果存在,直接返回 Map 中的那个拷贝对象

如果不存在,开始拷贝对象:

对数组,拷贝一个空数组
对对象,拷贝一个空对象
在拷贝对象时,将原对象作为 key,拷贝的对象作为 value 存入 Map
递归拷贝对象的各个属性,递归时仍传入这个 Map
这样通过 Map 记录已经拷贝过的对象,就可以解决循环引用的问题:当再次遇到循环引用的对象时,直接返回已拷贝过的对象即可。

整体思路是利用 Map 进行一层缓存,避免循环引用时陷入递归死循环。


function deepClone(obj, hash = new Map()) {
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }

  if (hash.has(obj)) {
    return hash.get(obj); 
  }

  let cloneObj = Array.isArray(obj) ? [] : {};

  hash.set(obj, cloneObj);

  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      cloneObj[key] = deepClone(obj[key], hash);
    } 
  }

  return cloneObj;
}

// Usage:
let obj = {
  a: 1,
  b: {
    c: 2
  }
};

obj.b = obj; // Circular reference

let objClone = deepClone(obj);