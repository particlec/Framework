1、 同步异步 直观印象

1.1、一般同步就是顺序执行代码，异步就是不等结果


console.log(1)
sleep(3)           // 这里让控制台睡3s
console.log(2)  // 这里的2会在3s后被打印出来
这里是正常的同步代码，打印数字1，控制台睡3秒，再打印数字2



console.log(1)
setTimeOut(function(){console.log('3秒结束')},3000)
console.log(2)  // 不等定时器，直接打印2
这里打印1后立刻打印2

那么问题来了，
js中有哪些实现异步的函数呢？
JS是单线程，是如何实现异步代码的呢？
异步的函数，在代码中的运行顺序是怎么样的呢？

2、 初步了解异步

2.1、JS是单线程，是如何实现异步代码的呢？


异步代码最简单的的例子就是 调接口，接口调了，因为不知道什么时候能得到结果，所以不能同步，同步的话，鬼知道这接口有多久才返回值，总不能让整个程序都等吧？
------ 所以 异步为了解决最大的问题是：处理不知道什么时候能够得到结果函数
那么，给一个线程 监听 异步方法的返回值就好了，

但是js是单线程哪有多余的进程 做这件事？ js在V8里运行啊，js没有进程，浏览器有啊，那这个线程 就是 消息队列

消息队列里面的规则：主线程代码执行完后，才会执行里面的代码。

就是上面的例子：

console.log(1)
setTimeOut(function(){console.log('3秒结束')},3000)
console.log(2)  // 不等定时器，直接打印2
setTimeOut 实际上 就模拟并实现了异步的过程，一段时间后执行setTimeOut 里的函数 ，只不过一段时间 是可控的，但由于浏览器实现机制，真实时间往往比 设定时间大
