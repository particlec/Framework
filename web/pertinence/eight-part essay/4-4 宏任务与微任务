首先看一道题

Promise.resolve().then(() => {
    console.log(0);
    return Promise.resolve(4);
}).then((res) => {
    console.log(res)
})

Promise.resolve().then(() => {
    console.log(1);
}).then(() => {
    console.log(2);
}).then(() => {
    console.log(3);
}).then(() => {
    console.log(5);
}).then(() =>{
    console.log(6);
})

他是两个 代码块，我就叫代码块A、B：
按顺序 从代码块 A console.log(0)开始运行         运行宏任务 1

return Promise.resolve(4)                    放入微任务 一阶，不运行
.then((res) => {
    console.log(res)
})                                           放入微任务 二阶，不运行

运行 代码块 B     console.log(1);              运行宏任务2
console.log(2);                              放入微任务 一阶，不运行
console.log(3);                              放入微任务 二阶，不运行
console.log(5);                              放入微任务 三阶，不运行
console.log(6);                              放入微任务 四阶，不运行
                                             开始运行微任务
                                             0、1、2、3、4、5、6 或者  0、1、2、4、3、5、6  （不同环境不同）

 Js 有两种任务的执行模式：同步模式（Synchronous）和异步模式（Asynchronous）。
 在异步模式下，创建异步任务主要分为宏任务与微任务两种。
 宏任务（Macrotask）：setTimeout、代码块、I/O，事件队列
 微任务（Microtask）：Promise.[ then/catch/finally ] 等

 先运行 宏任务
 后运行 微任务




