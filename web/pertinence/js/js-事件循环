为了解决js单线程 排队阻塞线程，其实类似于 java 的消息mq




事件循环机制
avaScript 事件循环机制分为: 浏览器事件循环机制和 Node 事件循环机制，两者的实现技术不一样，
浏览器 Event Loop 是 HTML 中定义的规范，Node Event Loop 是由 libuv 库实现。 我们只讲浏览器事件循环机制。


主线程（js引擎线程）中执行宏任务（JS整体代码或回调函数），执行过程中会将对象存储到堆（heap）中，将函数的参数和局部变量加入到栈（stack）中，
执行完毕后会释放堆或退出栈。执行完这个宏任务后，会判断微任务队列是否为空，如果不为空，则会将所有的微任务依次取出并执行。如果在这个过程中触发了任何 Web APIs 将进行第二步操作。

调用 Web API，并在合适的时候将回调函数加入到事件回调队列（event queue）中。比如执行了setTimeout(callback1, 1000)，会创建一个计时器，
并且在另一个线程（浏览器定时触发线程）里面监听计时器是否过期，等到计时器过期后，会将对应回调 callback1加入事件回调队列中。

等到第一步中的微任务执行完毕之后，会判断事件回调队列是否为空。如果不为空，则会取出并执行最先进入队列的回调函数，执行过程如同第一步。如果为空，
则会视情况进行等待或挂起主线程。 一句话总结:先执行一个宏任务，再执行这个宏任务产生的对应微任务，执行完毕后，再执行后面的宏任务，以此往复。

